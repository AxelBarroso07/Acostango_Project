<%- include('./partials/headerStart.ejs') %>
<title>Calendar set</title>
<link rel="stylesheet" type="text/css" media="screen" href="./styles/calendar.css" />
<%- include('./partials/headerEnd.ejs') %>

<p>Schedule</p>

<p><%- positonMonth %></p>

<table border="1">
    <thead>
        <tr>
            <!-- Hour column -->
            <th>Hour</th>
            <% for(let i = 0; i < weekDay.length; i++) {%>
                <th> <%- weekDay[i] %> </th>
            <% } %>
        </tr>
    </thead>
    <tbody>
        <!-- Days and classes colummns -->
        <% for(let i = 0; i < uniqueSortedArray.length; i++) { %>
            <tr>
                <td><%- uniqueSortedArray[i] %></td>
                <% for(let j = 0; j < weekDay.length; j++) { %>
                    <% const classesForCell = rowsParse.filter(rowParse => rowParse.day === weekDay[j] && rowParse.hourCalendarClass === uniqueSortedArray[i]) %>

                    <% if(classesForCell.length > 0) { %>
                        <td>
                            <% for(let k = 0; k < classesForCell.length; k++) { %>
                                <%- classesForCell[k].title %> <%- classesForCell[k].time12hrsStartFormat %>-<%- classesForCell[k].time12hrsFinishFormat %>
                                <% if (k < classesForCell.length - 1) { %>
                                    <br>
                                <% } %>
                            <% } %>
                        </td>
                    <% } else { %>
                        <td></td>
                    <% } %>
                <% } %>
            </tr>
        <% } %>
        
    </tbody>
</table>

<% if(rowsParse && rowsParse.length > 0){ %>
    <div class="divClassesDB">
        <% rowsParse.map(rowParse => { %>
            <div class="classesDB">
                <span><%- rowParse.idCalendar %></span>
                <span><%- rowParse.title %></span>
                <span><%- rowParse.day %></span>
                <span><%- rowParse.time12hrsStartFormat %> - </span>
                <span><%- rowParse.time12hrsFinishFormat %></span>
                <button onclick="editClass('<%- rowParse.idCalendar %>')" class="modal">Edit</button>
                <button onclick="showHide(true, '<%- rowParse.idCalendar %>')" class="deleteButton">Delete</button>

                <div class="dialogContainer">
                    <!-- Delete class dialog -->
                    <dialog id="confirmationDeleteDiv_<%- rowParse.idCalendar %>" class="dialog" style="display: none;">
                        <p>Delete this class?</p>
                        <div>
                            <button id="deleteConfirmYes" onclick="deleteClass('<%- rowParse.idCalendar %>'), showHide(false, '<%- rowParse.idCalendar %>')">Yes</button>
                        </div>
                        <div>
                            <button id="deleteConfirmNo" onclick="showHide(false, '<%- rowParse.idCalendar %>')">No</button>
                        </div>
                    </dialog>

                    <!-- Delete class dialog -->
                    <dialog class="dialog" style="display: none;" id="<%- 'editFields_' + rowParse.idCalendar %>" >
                        <form id="editForm_<%- rowParse.idCalendar %>" onsubmit="confirmEdit('<%- rowParse.idCalendar %>', '<%- rowParse.title %>', '<%- rowParse.timeStartParse %>', '<%- rowParse.timeFinishParse %>')">
                            <div class="dialogContent">
                                <!-- Campos de edición -->
                                <label for="<%- 'editTitle_' + rowParse.idCalendar %>">Title:</label>
                                <input type="text" id="<%- 'editTitle_' + rowParse.idCalendar %>" name="<%- 'editTitle_' + rowParse.idCalendar %>" value="<%- rowParse.title %>">
                                <label for="<%- 'editTimeStart_' + rowParse.idCalendar %>">Time start:</label>
                                <input type="time" id="<%- 'editTimeStart_' + rowParse.idCalendar %>" name="<%- 'editTimeStart_' + rowParse.idCalendar %>" value="<%- rowParse.timeStartParse %>">
                                <label for="<%- 'editTimeFinish_' + rowParse.idCalendar %>">Time finish:</label>
                                <input type="time" id="<%- 'editTimeFinish_' + rowParse.idCalendar %>" name="<%- 'editTimeFinish_' + rowParse.idCalendar %>" value="<%- rowParse.timeFinishParse %>">
                                <!-- Otros campos de edición... -->
                                <button type="submit">Save Changes</button>
                                <button type="button" class="closeModal" onclick="hideModal('editFields_<%- rowParse.idCalendar %>', '<%- rowParse.idCalendar %>','<%- rowParse.title %>')">Close</button>
                            </div>
                        </form>
                    </dialog>
                </div>
            </div>
        <% }) %>
    </div>
<% } %>

<button onclick="showForm()">Create new class</button>
<div>
    <form id="form" style="display: none;">
        <label for="title">Title:</label>
        <input type="text" id="title" name="title" min="3" max="40" value="">
        <select name="day" id="day">
            <option disabled selected value="">Week day</option>
            <% for(let i = 0; i < weekDay.length; i++) {%>
                <option value="<%- weekDay[i] %>"> <%- weekDay[i] %> </option>
            <% } %>
        </select> <br>
            <label for="time_start">Time start:</label>
            <input type="time" id="time_start" name="time_start">
            <label for="time_finish">Time finish:</label>
            <input type="time" id="time_finish" name="time_finish">
            <button type="submit" name="submitButton" value="submitValue">Save class</button>
        <button type="button" onclick="hideForm()">Cancel</button>
    </form>
</div>

<script>
    const form =  document.getElementById("form");

    function showForm() {
        form.style.display = "block";
    }

    function hideForm() {
        form.style.display = "none";
    }

    function hideModal(modalId, idCalendar, originalTitle) {
        // console.log(modalId)
        // console.log(idCalendar)
        // console.log(originalTitle)
        const dialog = document.getElementById(modalId)
        if (dialog) {
            const titleInput = document.getElementById('editTitle_' + idCalendar)
            if (titleInput) {
                titleInput.value = originalTitle
            }

            dialog.style.display = 'none'
            dialog.close()
        }
    }

    function editClass(idCalendarDB) {
        // console.log("idCalendar:", idCalendarDB)

        const dialog = document.getElementById('editFields_' + idCalendarDB)
        if (dialog) {
            dialog.style.display = 'block'
        }
    }

    function confirmEdit(idCalendarDB, titleDB, timeStartDB, timeFinishDB) {
        const dialog = document.getElementById('editFields_' + idCalendarDB)

        const newTitle = document.getElementById('editTitle_' + idCalendarDB).value
        const newTimeStart = document.getElementById('editTimeStart_' + idCalendarDB).value
        const newTimeFinish = document.getElementById('editTimeFinish_' + idCalendarDB).value

        console.log(newTimeStart)
        console.log(newTimeFinish)

        const port = '<%= process.env.PORT %>'
        const host = '<%= process.env.DB_HOST %>'

        const newData = {}

        if (dialog) {
            dialog.close()
        }

        if (newTitle !== titleDB) {
            newData.newTitle = newTitle
        }
        if (newTimeStart !== timeStartDB) {
            newData.newTimeStart = newTimeStart
        }
        if (newTimeFinish !== timeFinishDB) {
            newData.newTimeFinish = newTimeFinish
        }
        
        if(Object.keys(newData).length > 0) {
            // Realizar la solicitud de fetch con los datos del formulario
            fetch(`http://${host}:${port}/editClass/${idCalendarDB}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    newData
                })
            })
            .then(response => response.json())
            .then(data => {
                console.log("Cambios confirmados:", data)
                dialog.style.display = 'none'
                dialog.close()
                // console.log(window.location.href)
                location.reload();
            })
            .catch(error => {
                console.log("Error al confirmar cambios:", error)
            })
        } else {
            console.log("Cambia algún dato")
        }
    }

    function showHide(option, idCalendar) {
        const confirmationDeleteDiv = document.getElementById("confirmationDeleteDiv_" + idCalendar)
        if (option) {
            confirmationDeleteDiv.style.display = 'block';
            confirmationDeleteDiv.dataset.idCalendar = idCalendar;
        } else {
            confirmationDeleteDiv.style.display = 'none';
            confirmationDeleteDiv.dataset.idCalendar = '';
        }
    }

    function deleteClass(idCalendar) {
        const port = '<%= process.env.PORT %>';
        const host = '<%= process.env.DB_HOST %>';

        console.log("idCalendar from deleteClass()", idCalendar);
        
        fetch(`http://${host}:${port}/deleteClass/${idCalendar}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(data => {
            console.log("Registro eliminado:", data)
            location.reload();
        })
        .catch(error => {
            console.log("Error al eliminar el registro:", error)
        })
    }

    document.getElementById("form").addEventListener("submit", ev=> {
        ev.preventDefault();
        console.log("llega al eventListener")
        const title = document.getElementById("title").value
        const day = document.getElementById("day").value
        const time_start = document.getElementById("time_start").value
        const time_finish = document.getElementById("time_finish").value
        createClass(title, day, time_start, time_finish);
    });

    function createClass(title, day, time_start, time_finish) {

        const port = '<%= process.env.PORT %>'
        const host = '<%= process.env.DB_HOST %>'

        console.log("title", title)
        console.log("day", day)
        console.log("time_start", time_start)
        console.log("time_start", time_finish)

        const newClass = {
            title,
            day,
            time_start,
            time_finish
        };

        fetch(`http://${host}:${port}/newClass`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                newClass
            })
        })
        .then(response => response.json())
        .then(data => {
            console.log("New class:", data);
            location.reload();
        })
        .catch(error => {
            console.error('Error to insert new class:', error);
        })
    }

</script>
    
<%- include('./partials/footer.ejs') %>